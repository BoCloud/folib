/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.gremlin.adapters;

import com.folib.gremlin.adapters.UnfoldEntityTraversal;
import com.folib.gremlin.adapters.VertexEntityTraversalAdapter;
import com.folib.db.schema.Vertices;
import com.folib.domain.Vulnerability;
import com.folib.domain.VulnerabilityEntity;
import com.folib.gremlin.dsl.EntityTraversal;
import com.folib.gremlin.dsl.__;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.tinkerpop.gremlin.process.traversal.Traverser;
import org.apache.tinkerpop.gremlin.structure.Element;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.springframework.stereotype.Component;

import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import static cn.hutool.core.convert.Convert.toLocalDateTime;
import static com.folib.gremlin.dsl.EntityTraversalUtils.*;
import static org.apache.tinkerpop.gremlin.structure.VertexProperty.Cardinality.single;

/**
 * @author veadan
 * @date 2022/9/29
 */
@Component
public class VulnerabilityAdapter implements VertexEntityTraversalAdapter<Vulnerability> {

    @Override
    public String label() {
        return Vertices.VULNERABILITY;
    }

    @Override
    public EntityTraversal<Vertex, Vulnerability> fold() {
        return __.<Vertex, Object>project("id", "uuid", "created", "lastUpdated", "vulnerabilityPlatformName",
                "vulnerabilitySource", "cvssV2Score", "cvssV2Severity", "cvssV3Score", "cvssV3Severity", "description",
                "highestSeverityText", "versionEndExcluding", "storages", "storagesAndRepositories")
                .by(__.id())
                .by(__.enrichPropertyValue("uuid"))
                .by(__.enrichPropertyValue("created"))
                .by(__.enrichPropertyValue("lastUpdated"))
                .by(__.enrichPropertyValue("vulnerabilityPlatformName"))
                .by(__.enrichPropertyValue("vulnerabilitySource"))
                .by(__.enrichPropertyValue("cvssV2Score"))
                .by(__.enrichPropertyValue("cvssV2Severity"))
                .by(__.enrichPropertyValue("cvssV3Score"))
                .by(__.enrichPropertyValue("cvssV3Severity"))
                .by(__.enrichPropertyValue("description"))
                .by(__.enrichPropertyValue("highestSeverityText"))
                .by(__.enrichPropertyValue("versionEndExcluding"))
                .by(__.enrichPropertyValues("storages"))
                .by(__.enrichPropertyValues("storagesAndRepositories"))
                .map(this::map);
    }

    public EntityTraversal<Vertex, Vulnerability> baseFold() {
        return __.<Vertex, Object>project("id", "uuid", "highestSeverityText")
                .by(__.id())
                .by(__.enrichPropertyValue("uuid"))
                .by(__.enrichPropertyValue("highestSeverityText"))
                .map(this::map);
    }

    private Vulnerability map(Traverser<Map<String, Object>> t) {
        VulnerabilityEntity result = new VulnerabilityEntity();
        result.setNativeId(extractObject(Long.class, t.get().get("id")));
        result.setUuid(extractObject(String.class, t.get().get("uuid")));
        result.setCreated(toLocalDateTime(extractObject(Long.class, t.get().get("created"))));
        result.setLastUpdated(toLocalDateTime(extractObject(Long.class, t.get().get("lastUpdated"))));
        result.setVulnerabilityPlatformName(extractObject(String.class, t.get().get("vulnerabilityPlatformName")));
        result.setVulnerabilitySource(extractObject(String.class, t.get().get("vulnerabilitySource")));
        result.setCvssV2Score(extractObject(String.class, t.get().get("cvssV2Score")));
        result.setCvssV2Severity(extractObject(String.class, t.get().get("cvssV2Severity")));
        result.setCvssV3Score(extractObject(String.class, t.get().get("cvssV3Score")));
        result.setCvssV3Severity(extractObject(String.class, t.get().get("cvssV3Severity")));
        result.setDescription(extractObject(String.class, t.get().get("description")));
        result.setHighestSeverityText(extractObject(String.class, t.get().get("highestSeverityText")));
        result.setVersionEndExcluding(extractObject(String.class, t.get().get("versionEndExcluding")));
        result.setStorages(extractPropertyList(String.class, t.get().get("storages")).stream()
                .filter(e -> !e.trim().isBlank())
                .collect(Collectors.toCollection(LinkedHashSet::new)));
        result.setStoragesAndRepositories(extractPropertyList(String.class, t.get().get("storagesAndRepositories")).stream()
                .filter(e -> !e.trim().isBlank())
                .collect(Collectors.toCollection(LinkedHashSet::new)));
        return result;
    }

    @Override
    public UnfoldEntityTraversal<Vertex, Vertex> unfold(Vulnerability entity) {
        EntityTraversal<Vertex, Vertex> t = __.identity();
        if (Objects.nonNull(entity.getCreated())) {
            t = t.property(single, "created", toLong(entity.getCreated()));
        }
        if (Objects.nonNull(entity.getLastUpdated())) {
            t = t.property(single, "lastUpdated", toLong(entity.getLastUpdated()));
        }
        if (StringUtils.isNotBlank(entity.getVulnerabilityPlatformName())) {
            t = t.property(single, "vulnerabilityPlatformName", entity.getVulnerabilityPlatformName());
        }
        if (StringUtils.isNotBlank(entity.getVulnerabilitySource())) {
            t = t.property(single, "vulnerabilitySource", entity.getVulnerabilitySource());
        }
        if (StringUtils.isNotBlank(entity.getCvssV2Score())) {
            t = t.property(single, "cvssV2Score", entity.getCvssV2Score());
        }
        if (StringUtils.isNotBlank(entity.getCvssV2Severity())) {
            t = t.property(single, "cvssV2Severity", entity.getCvssV2Severity());
        }
        if (StringUtils.isNotBlank(entity.getCvssV3Score())) {
            t = t.property(single, "cvssV3Score", entity.getCvssV3Score());
        }
        if (StringUtils.isNotBlank(entity.getCvssV3Severity())) {
            t = t.property(single, "cvssV3Severity", entity.getCvssV3Severity());
        }
        if (StringUtils.isNotBlank(entity.getDescription())) {
            t = t.property(single, "description", entity.getDescription());
        }
        if (StringUtils.isNotBlank(entity.getHighestSeverityText())) {
            t = t.property(single, "highestSeverityText", entity.getHighestSeverityText());
        }
        if (StringUtils.isNotBlank(entity.getVersionEndExcluding())) {
            t = t.property(single, "versionEndExcluding", entity.getVersionEndExcluding());
        }
        if (CollectionUtils.isNotEmpty(entity.getStorages())) {
            t = t.sideEffect(__.properties("storages").drop());
            t = t.property("storages", entity.getStorages());
        }
        if (CollectionUtils.isNotEmpty(entity.getStoragesAndRepositories())) {
            t = t.sideEffect(__.properties("storagesAndRepositories").drop());
            t = t.property("storagesAndRepositories", entity.getStoragesAndRepositories());
        }
        return new UnfoldEntityTraversal<>(Vertices.VULNERABILITY, entity, t);
    }

    @Override
    public EntityTraversal<Vertex, Element> cascade() {
        return __.<Vertex>identity().map(t -> Element.class.cast(t.get()));
    }

}
