/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.controllers;

import com.folib.forms.vulnerability.RepositoryVulnerabilityStatisticsForm;
import com.folib.forms.vulnerability.VulnerabilityGraphForm;
import com.folib.forms.vulnerability.VulnerabilityTableForm;
import com.folib.scanner.common.msg.TableResultResponse;
import com.folib.scanner.common.util.Query;
import com.folib.services.VulnerabilityWebService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.inject.Inject;
import java.util.Map;

/**
 * @author veadan
 */
@RestController
@RequestMapping("/api/vulnerability")
@Api(description = "漏洞管理",tags = "漏洞管理")
public class VulnerabilityController extends BaseController {

    @Inject
    private VulnerabilityWebService vulnerabilityWebService;

    @ApiOperation(value = "查询漏洞分页列表", response = VulnerabilityTableForm.class)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
    @PreAuthorize("hasAuthority('ARTIFACTS_VIEW')")
    @GetMapping(value = "/page")
    public TableResultResponse<VulnerabilityTableForm> page(@RequestParam(required = false) Map<String, Object> params) {
        Query query = new Query(params);
        String vulnerabilityUuid = params.getOrDefault("vulnerabilityUuid", "").toString();
        String storageId = params.getOrDefault("storageId", "").toString();
        String repositoryId = params.getOrDefault("repositoryId", "").toString();
        Integer dateSearchType = Integer.parseInt(params.getOrDefault("dateSearchType", "0").toString());
        Integer source = Integer.parseInt(params.getOrDefault("source", "0").toString());
        return vulnerabilityWebService.queryVulnerabilityPage(source, query, vulnerabilityUuid, storageId, repositoryId, dateSearchType);
    }

    @ApiOperation(value = "查询漏洞分页列表", response = VulnerabilityTableForm.class)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
    @PreAuthorize("hasAuthority('ARTIFACTS_VIEW')")
    @GetMapping(value = "/pageByArtifact")
    public TableResultResponse<VulnerabilityTableForm> pageByArtifact(@RequestParam(name = "page", required = false) Integer page,
                                                                      @RequestParam(name = "limit", required = false) Integer limit,
                                                                      @RequestParam(name = "artifactPath") String artifactPath,
                                                                      @RequestParam(name = "searchKeyword", required = false) String searchKeyword) {
        return vulnerabilityWebService.queryVulnerabilityPageByArtifact(page, limit, artifactPath, searchKeyword);
    }

    @ApiOperation(value = "查询漏洞分页列表", response = VulnerabilityTableForm.class)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
    @PreAuthorize("hasAuthority('ARTIFACTS_VIEW')")
    @GetMapping(value = "/pageByComponent")
    public TableResultResponse<VulnerabilityTableForm> pageByComponent(@RequestParam(name = "page", required = false) Integer page,
                                                                       @RequestParam(name = "limit", required = false) Integer limit,
                                                                       @RequestParam(name = "componentUuid") String componentUuid,
                                                                       @RequestParam(name = "searchKeyword", required = false) String searchKeyword) {
        return vulnerabilityWebService.queryVulnerabilityPageByComponent(page, limit, componentUuid, searchKeyword);
    }

    @ApiOperation(value = "查询漏洞图谱数据", response = VulnerabilityGraphForm.class)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
    @PreAuthorize("hasAuthority('ARTIFACTS_VIEW')")
    @GetMapping(value = "/graph")
    public ResponseEntity<VulnerabilityGraphForm> graph(@RequestParam("uuid") String uuid, @RequestParam(value = "storageId", required = false) String storageId, @RequestParam(value = "repositoryId", required = false) String repositoryId) {
        return ResponseEntity.ok(vulnerabilityWebService.graphV1(uuid, storageId, repositoryId));
    }

    @ApiOperation(value = "仓库漏洞统计")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK", response = RepositoryVulnerabilityStatisticsForm.class)})
    @PreAuthorize("hasAuthority('ARTIFACTS_VIEW')")
    @GetMapping(value = "/repositoryVulnerabilityStatistics")
    public ResponseEntity<RepositoryVulnerabilityStatisticsForm> repositoryVulnerabilityStatistics(@RequestParam("storageId") String storageId, @RequestParam("repositoryId") String repositoryId) {
        return ResponseEntity.ok(vulnerabilityWebService.repositoryVulnerabilityStatistics(storageId, repositoryId));
    }

    @ApiOperation(value = "处理漏洞顶点数据中的存储空间、仓库")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
    @PreAuthorize("hasAuthority('ADMIN')")
    @GetMapping(value = "/handlerStoragesAndRepositories")
    public ResponseEntity<ResponseMessage> handlerStoragesAndRepositories() {
        vulnerabilityWebService.handlerStoragesAndRepositories();
        return ResponseEntity.ok(ResponseMessage.ok());
    }

}
