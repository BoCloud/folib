/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.scanner.vulnerability.nvd;


import com.folib.scanner.vulnerability.model.Cpe;
import com.folib.scanner.vulnerability.model.ICpe;
import com.folib.scanner.vulnerability.model.VulnerableSoftware;
import us.springett.parsers.cpe.CpeParser;
import us.springett.parsers.cpe.exceptions.CpeEncodingException;
import us.springett.parsers.cpe.exceptions.CpeParsingException;

public final class ModelConverter {

    private ModelConverter() {
    }

    public static ICpe convertCpe23Uri(ICpe cpe, String cpe23Uri) throws CpeParsingException, CpeEncodingException {
        us.springett.parsers.cpe.Cpe parsedCpe = CpeParser.parse(cpe23Uri);
        cpe.setCpe23(cpe23Uri);
        cpe.setCpe22(parsedCpe.toCpe22Uri());
        cpe.setPart(parsedCpe.getPart().getAbbreviation());
        cpe.setVendor(parsedCpe.getVendor());
        cpe.setProduct(parsedCpe.getProduct());
        cpe.setVersion(parsedCpe.getVersion());
        cpe.setUpdate(parsedCpe.getUpdate());
        cpe.setEdition(parsedCpe.getEdition());
        cpe.setLanguage(parsedCpe.getLanguage());
        cpe.setSwEdition(parsedCpe.getSwEdition());
        cpe.setTargetSw(parsedCpe.getTargetSw());
        cpe.setTargetHw(parsedCpe.getTargetHw());
        cpe.setOther(parsedCpe.getOther());
        return cpe;
    }

    public static Cpe convertCpe23UriToCpe(String cpe23Uri) throws CpeParsingException, CpeEncodingException {
        Cpe cpe = new Cpe();
        return (Cpe)convertCpe23Uri(cpe, cpe23Uri);
    }

    public static VulnerableSoftware convertCpe23UriToVulnerableSoftware(String cpe23Uri) throws CpeParsingException, CpeEncodingException {
        VulnerableSoftware vs = new VulnerableSoftware();
        return (VulnerableSoftware)convertCpe23Uri(vs, cpe23Uri);
    }
}

