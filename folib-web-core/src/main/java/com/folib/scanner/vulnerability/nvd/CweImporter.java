/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.scanner.vulnerability.nvd;


import com.folib.scanner.vulnerability.ICweService;
import com.folib.scanner.vulnerability.SpringUtils;
import com.folib.scanner.vulnerability.model.Cwe;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import reactor.core.publisher.Flux;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

/**
 * 此类分析 CWE 并将它们添加到数据库中（如有必要）。
 * cwec_v3.3.xml obtained from https://cwe.mitre.org/data/xml/cwec_v3.3.xml
 */
public class CweImporter {

    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(CweImporter.class);
    private static final Map<Integer, String> CWE_MAPPINGS = new TreeMap<>();

    public void processCweDefinitions() throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
        try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("nist/cwec_v4.17.xml")) {

            LOGGER.info("Synchronizing CWEs with datastore");

            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
            factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
            factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            factory.setXIncludeAware(false);
            factory.setExpandEntityReferences(false);
            final DocumentBuilder builder = factory.newDocumentBuilder();

            final Document doc = builder.parse(is);
            final var xPathfactory = XPathFactory.newInstance();
            final XPath xpath = xPathfactory.newXPath();

            final XPathExpression expr1 = xpath.compile("/Weakness_Catalog/Categories/Category");
            final XPathExpression expr2 = xpath.compile("/Weakness_Catalog/Weaknesses/Weakness");
            final XPathExpression expr3 = xpath.compile("/Weakness_Catalog/Views/View");

            parseNodes((NodeList) expr1.evaluate(doc, XPathConstants.NODESET));
            parseNodes((NodeList) expr2.evaluate(doc, XPathConstants.NODESET));
            parseNodes((NodeList) expr3.evaluate(doc, XPathConstants.NODESET));
            ICweService cweService = SpringUtils.getBean(ICweService.class);
            //for (final Map.Entry<Integer, String> entry : CWE_MAPPINGS.entrySet()) {
            //    Cwe cwe = new Cwe();
            //    cwe.setCweId(entry.getKey());
            //    cwe.setName(entry.getValue().replaceAll("\\\\", "\\\\\\\\"));
            //}
            Flux.fromIterable(CWE_MAPPINGS.entrySet()).buffer(100).map(cweList -> {
                return cweList.stream().map(entry -> {
                    Cwe cwe = new Cwe();
                    cwe.setCweId(entry.getKey());
                    cwe.setName(entry.getValue().replaceAll("\\\\", "\\\\\\\\"));
                    return cwe;
                }).collect(Collectors.toList());
            }).onErrorResume(e -> {
                LOGGER.error("Error occurred in Flux processing", e);
                return Flux.empty(); // 或者根据业务需求返回一个默认值或执行其他操作
            }).subscribe(cweService::insertOrUpdateBatch);
            LOGGER.info("CWE synchronization complete");
        }
    }

    private static void parseNodes(final NodeList nodeList) {
        for (int i = 0; i < nodeList.getLength(); i++) {
            final Node node = nodeList.item(i);
            final NamedNodeMap attributes = node.getAttributes();
            final Integer id = Integer.valueOf(attributes.getNamedItem("ID").getNodeValue());
            final String desc = attributes.getNamedItem("Name").getNodeValue();
            CWE_MAPPINGS.put(id, desc);
        }
    }

}

