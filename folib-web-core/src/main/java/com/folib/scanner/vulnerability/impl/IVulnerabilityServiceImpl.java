/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.scanner.vulnerability.impl;


import com.folib.entity.VulnerabilityEntity;
import com.folib.entity.VulnerableSoftwareVulnerabilitiesEntity;
import com.folib.mapper.VulnerabilityMapper;
import com.folib.mapper.VulnerableSoftwareVulnerabilitiesMapper;
import com.folib.scanner.vulnerability.IVulnerabilityService;
import com.folib.scanner.vulnerability.model.Vulnerability;
import com.folib.scanner.vulnerability.model.VulnerableSoftwareVulnerabilities;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.inject.Inject;
import java.util.List;
import java.util.UUID;
import java.util.function.Consumer;
import java.util.stream.Collectors;

@Slf4j
@Service
public class IVulnerabilityServiceImpl implements IVulnerabilityService {

    @Inject
    private VulnerabilityMapper vulnerabilityMapper;
    @Inject
    private VulnerableSoftwareVulnerabilitiesMapper vsvMapper;

    /**
     * 批量插入或更新漏洞信息
     *
     * @param vulnerabilities 漏洞列表
     */
    @Override
    public void insertOrUpdateBatch(List<Vulnerability> vulnerabilities) {
        Flux.fromIterable(vulnerabilities).buffer(100)
                .map(vulnerabilityList -> {
                    return vulnerabilityList.stream().map(this::toEntity).collect(Collectors.toList());
                })
                .onErrorResume(throwable -> {
                    log.error("An error occurred in MyBatis operation", throwable);
                    // 这里可以执行其他处理操作，如回滚事务
                    return Mono.empty(); // 返回一个空的 Mono，表示异常已经被处理
                }).subscribe(new Consumer<List<VulnerabilityEntity>>() {
                    @Override
                    public void accept(List<VulnerabilityEntity> vulnerabilityEntities) {
                        vulnerabilityMapper.insertOrUpdateBatch(vulnerabilityEntities);
                    }
                });
    }

    /**
     * 批量插入或更新漏洞与受影响软件关联信息
     *
     * @param svs
     */
    @Override
    public void svInsertOrUpdateBatch(List<VulnerableSoftwareVulnerabilities> svs) {
        Flux.fromIterable(svs).buffer(100)
                .map(svList -> {
                    return svList.stream().map(sv -> {
                        VulnerableSoftwareVulnerabilitiesEntity entity = new VulnerableSoftwareVulnerabilitiesEntity();
                        entity.setVulnerabilityId(sv.getVulnerabilityId());
                        entity.setVulnerablesoftwareId(sv.getVulnerablesoftwareId());
                        return entity;
                    }).collect(Collectors.toList());
                })
                .subscribe(vulnerabilityList -> {
                    this.vsvMapper.insertOrUpdateBatch(vulnerabilityList);
                });
    }

    public VulnerabilityEntity toEntity(Vulnerability vulnerability) {
        VulnerabilityEntity vulnerabilityEntity = toVulnerabilityEntity(vulnerability);
        if (vulnerability != null) {
            vulnerabilityEntity.setId(vulnerability.getId());
            vulnerabilityEntity.setCreated(vulnerability.getCreated());
            vulnerabilityEntity.setPublished(vulnerability.getPublished());
            vulnerabilityEntity.setUpdated(vulnerability.getUpdated());
            vulnerabilityEntity.setVulnId(vulnerability.getVulnId());
            vulnerabilityEntity.setSource(vulnerability.getSource());
            vulnerabilityEntity.setCredits(vulnerability.getCredits());
            vulnerabilityEntity.setVulnerableVersions(vulnerability.getVulnerableVersions());
            vulnerabilityEntity.setPatchedVersions(vulnerability.getPatchedVersions());
            vulnerabilityEntity.setDescription(vulnerability.getDescription());
            vulnerabilityEntity.setDetail(vulnerability.getDetail());
            vulnerabilityEntity.setTitle(vulnerability.getTitle());
            vulnerabilityEntity.setSubTitle(vulnerability.getSubTitle());
            vulnerabilityEntity.setReferences(vulnerability.getReferences());
            vulnerabilityEntity.setRecommendation(vulnerability.getRecommendation());
            vulnerabilityEntity.setSeverity(vulnerability.getSeverity().name());
            vulnerabilityEntity.setCvssV2Vector(vulnerability.getCvssV2Vector());
            vulnerabilityEntity.setCvssV2BaseScore(vulnerability.getCvssV2BaseScore());
            vulnerabilityEntity.setCvssV2ImpactScore(vulnerability.getCvssV2ImpactSubScore());
            vulnerabilityEntity.setCvssV2ExploitScore(vulnerability.getCvssV2ExploitabilitySubScore());
            vulnerabilityEntity.setCvssV3Vector(vulnerability.getCvssV3Vector());
            vulnerabilityEntity.setCvssV3BaseScore(vulnerability.getCvssV3BaseScore());
            vulnerabilityEntity.setCvssV3ImpactScore(vulnerability.getCvssV3ImpactSubScore());
            vulnerabilityEntity.setCvssV3ExploitScore(vulnerability.getCvssV3ExploitabilitySubScore());
            vulnerabilityEntity.setOwasprrLikelihoodScore(vulnerability.getOwaspRRLikelihoodScore());
            vulnerabilityEntity.setOwasprrBusinessImpactScore(vulnerability.getOwaspRRBusinessImpactScore());
            vulnerabilityEntity.setOwasprrTechnicalImpactScore(vulnerability.getOwaspRRTechnicalImpactScore());
            vulnerabilityEntity.setOwasprrVector(vulnerability.getOwaspRRVector());
            vulnerabilityEntity.setName(vulnerability.getName());
            vulnerabilityEntity.setZhDescription(vulnerability.getZhDescription());
            vulnerabilityEntity.setCnvId(vulnerability.getCnvId());
            if (vulnerability.getCwes() != null) {
                String result = vulnerability.getCwes().stream()
                        .map(Object::toString)
                        .collect(Collectors.joining(","));
                vulnerabilityEntity.setCweList(result);
            }
            if(vulnerabilityEntity.getUuid() == null){
                vulnerabilityEntity.setUuid(UUID.randomUUID().toString());
            }
        }
        return vulnerabilityEntity;
    }

    public VulnerabilityEntity toVulnerabilityEntity(Vulnerability vulnerability) {
        if ( vulnerability == null ) {
            return null;
        }

        VulnerabilityEntity vulnerabilityEntity = new VulnerabilityEntity();

        vulnerabilityEntity.setId( vulnerability.getId() );
        vulnerabilityEntity.setCreated( vulnerability.getCreated() );
        vulnerabilityEntity.setCredits( vulnerability.getCredits() );
        vulnerabilityEntity.setCvssV2BaseScore( vulnerability.getCvssV2BaseScore() );
        vulnerabilityEntity.setCvssV2Vector( vulnerability.getCvssV2Vector() );
        vulnerabilityEntity.setCvssV3BaseScore( vulnerability.getCvssV3BaseScore() );
        vulnerabilityEntity.setCvssV3Vector( vulnerability.getCvssV3Vector() );
        vulnerabilityEntity.setDescription( vulnerability.getDescription() );
        vulnerabilityEntity.setDetail( vulnerability.getDetail() );
        vulnerabilityEntity.setEpssPercentile( vulnerability.getEpssPercentile() );
        vulnerabilityEntity.setEpssScore( vulnerability.getEpssScore() );
        vulnerabilityEntity.setFriendlyVulnId( vulnerability.getFriendlyVulnId() );
        vulnerabilityEntity.setPatchedVersions( vulnerability.getPatchedVersions() );
        vulnerabilityEntity.setPublished( vulnerability.getPublished() );
        vulnerabilityEntity.setRecommendation( vulnerability.getRecommendation() );
        vulnerabilityEntity.setReferences( vulnerability.getReferences() );
        if ( vulnerability.getSeverity() != null ) {
            vulnerabilityEntity.setSeverity( vulnerability.getSeverity().name() );
        }
        vulnerabilityEntity.setSource( vulnerability.getSource() );
        vulnerabilityEntity.setSubTitle( vulnerability.getSubTitle() );
        vulnerabilityEntity.setTitle( vulnerability.getTitle() );
        vulnerabilityEntity.setUpdated( vulnerability.getUpdated() );
        vulnerabilityEntity.setUuid( vulnerability.getUuid() );
        vulnerabilityEntity.setVulnId( vulnerability.getVulnId() );
        vulnerabilityEntity.setVulnerableVersions( vulnerability.getVulnerableVersions() );
        vulnerabilityEntity.setName( vulnerability.getName() );
        vulnerabilityEntity.setZhDescription( vulnerability.getZhDescription() );
        vulnerabilityEntity.setCnvId( vulnerability.getCnvId() );

        return vulnerabilityEntity;
    }
}
