/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.scanner.vulnerability.impl;

import com.folib.entity.VulnerableSoftwareEntity;
import com.folib.mapper.VulnerableSoftwareMapper;
import com.folib.scanner.vulnerability.IVulnerableSoftwareService;
import com.folib.scanner.vulnerability.model.VulnerableSoftware;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;

import javax.inject.Inject;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Slf4j
@Service
public class VulnerableSoftwareServiceImpl implements IVulnerableSoftwareService {

    @Inject
    private VulnerableSoftwareMapper vulnerableSoftwareMapper;

    /**
     * 通过 CPE v2.3 字符串返回 VulnerableSoftware。
     *
     * @param cpe23                 CPE 2.3 字符串
     * @param versionEndExcluding
     * @param versionEndIncluding
     * @param versionStartExcluding
     * @param versionStartIncluding
     * @return 一个 VulnerableSoftware 对象，如果未找到，则为 null
     */
    @Override
    public VulnerableSoftware getVulnerableSoftwareByCpe23(String cpe23, String versionEndExcluding, String versionEndIncluding, String versionStartExcluding, String versionStartIncluding) {
        VulnerableSoftwareEntity entity = vulnerableSoftwareMapper.getVulnerableSoftwareByCpe23(cpe23, versionEndExcluding, versionEndIncluding, versionStartExcluding, versionStartIncluding);
        VulnerableSoftware vs = null;
        if (entity != null) {
            vs = new VulnerableSoftware();
            vs.setId(entity.getId());
            vs.setPurl(entity.getPurl());
            vs.setPurlType(entity.getPurlType());
            vs.setPurlNamespace(entity.getPurlNamespace());
            vs.setPurlName(entity.getPurlName());
            vs.setPurlVersion(entity.getPurlVersion());
            vs.setPurlQualifiers(entity.getPurlQualifiers());
            vs.setPurlSubpath(entity.getPurlSubpath());
            vs.setCpe22(entity.getCpe22());
            vs.setCpe23(entity.getCpe23());
            vs.setPart(entity.getPart());
            vs.setVendor(entity.getVendor());
            vs.setProduct(entity.getProduct());
            vs.setVersion(entity.getVersion());
            vs.setUpdate(entity.getUpdate());
            vs.setEdition(entity.getEdition());
            vs.setLanguage(entity.getLanguage());
            vs.setSwEdition(entity.getEdition());
            vs.setTargetSw(entity.getTargetsw());
            vs.setTargetHw(entity.getTargethw());
            vs.setOther(entity.getOther());
            vs.setVersionEndExcluding(entity.getVersionEndExcluding());
            vs.setVersionEndIncluding(entity.getVersionEndIncluding());
            vs.setVersionStartExcluding(entity.getVersionStartExcluding());
            vs.setVersionStartIncluding(entity.getVersionStartIncluding());
            vs.setVulnerable(entity.getVulnerable());
            //vs.setVulnerabilities();
            vs.setUuid(entity.getUuid());
            vs.setAffectedVersionAttributions(vs.getAffectedVersionAttributions());
        }
        return vs;
    }

    /**
     * 批量插入或更新 VulnerableSoftware 对象
     *
     * @param vsList VulnerableSoftware 对象列表
     */
    @Override
    public void insertOrUpdateBatch(List<VulnerableSoftware> vsList) {
        Flux.fromIterable(vsList).buffer(200)
                .map(vulnerableSoftwareList -> {
                    return vulnerableSoftwareList.stream().map(this::toVulnerableSoftwareEntity).collect(Collectors.toList());
                })  .subscribe(vulnerabilityList -> {
                    vulnerableSoftwareMapper.insertOrUpdateBatch(vulnerabilityList);
                });


    }

    public VulnerableSoftwareEntity toVulnerableSoftwareEntity(VulnerableSoftware vulnerableSoftware) {
        if ( vulnerableSoftware == null ) {
            return null;
        }

        VulnerableSoftwareEntity vulnerableSoftwareEntity = new VulnerableSoftwareEntity();
        vulnerableSoftwareEntity.setUuid(UUID.randomUUID().toString());
        vulnerableSoftwareEntity.setId( vulnerableSoftware.getId() );
        vulnerableSoftwareEntity.setCpe22( vulnerableSoftware.getCpe22() );
        vulnerableSoftwareEntity.setCpe23( vulnerableSoftware.getCpe23() );
        vulnerableSoftwareEntity.setEdition( vulnerableSoftware.getEdition() );
        vulnerableSoftwareEntity.setLanguage( vulnerableSoftware.getLanguage() );
        vulnerableSoftwareEntity.setOther( vulnerableSoftware.getOther() );
        vulnerableSoftwareEntity.setPart( vulnerableSoftware.getPart() );
        vulnerableSoftwareEntity.setProduct( vulnerableSoftware.getProduct() );
        vulnerableSoftwareEntity.setPurl( vulnerableSoftware.getPurl() );
        vulnerableSoftwareEntity.setPurlName( vulnerableSoftware.getPurlName() );
        vulnerableSoftwareEntity.setPurlNamespace( vulnerableSoftware.getPurlNamespace() );
        vulnerableSoftwareEntity.setPurlQualifiers( vulnerableSoftware.getPurlQualifiers() );
        vulnerableSoftwareEntity.setPurlSubpath( vulnerableSoftware.getPurlSubpath() );
        vulnerableSoftwareEntity.setPurlType( vulnerableSoftware.getPurlType() );
        vulnerableSoftwareEntity.setPurlVersion( vulnerableSoftware.getPurlVersion() );
        vulnerableSoftwareEntity.setUpdate( vulnerableSoftware.getUpdate() );
        vulnerableSoftwareEntity.setVendor( vulnerableSoftware.getVendor() );
        vulnerableSoftwareEntity.setVersion( vulnerableSoftware.getVersion() );
        vulnerableSoftwareEntity.setVersionEndExcluding( vulnerableSoftware.getVersionEndExcluding() );
        vulnerableSoftwareEntity.setVersionEndIncluding( vulnerableSoftware.getVersionEndIncluding() );
        vulnerableSoftwareEntity.setVersionStartExcluding( vulnerableSoftware.getVersionStartExcluding() );
        vulnerableSoftwareEntity.setVersionStartIncluding( vulnerableSoftware.getVersionStartIncluding() );
        vulnerableSoftwareEntity.setVulnerable( vulnerableSoftware.isVulnerable() );

        return vulnerableSoftwareEntity;
    }
}
