/*
 * Folib - [新一代AI制品仓库]
 * Copyright (C) 2025 bocloud.com.cn <folib@beyondcent.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 本程序是自由软件：您可依据GNU通用公共许可证（GPL-3.0+）条款重新发布和修改，
 * 但禁止任何形式的商业售卖行为（包括但不限于：直接销售、捆绑销售、云服务商用）。
 *
 * This program is distributed WITHOUT ANY WARRANTY.
 * Commercial sale of this software is expressly prohibited.
 *
 * For license details, see: https://www.gnu.org/licenses/gpl-3.0.html
 * 商业授权咨询请联系：folib@beyondcent.com
 */
package com.folib.services.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.folib.configuration.ConfigurationManager;
import com.folib.domain.Artifact;
import com.folib.forms.vulnerability.AffectedArtifactsForm;
import com.folib.forms.vulnerability.VulnerabilityDatabaseForm;
import com.folib.forms.vulnerability.VulnerabilityDatabaseTableForm;
import com.folib.mapper.VulnerabilityMapper;
import com.folib.providers.layout.DockerLayoutProvider;
import com.folib.repositories.ArtifactRepository;
import com.folib.scanner.common.msg.TableResultResponse;
import com.folib.services.VulnerabilityDatabaseService;
import com.folib.storage.repository.Repository;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * @author veadan
 **/
@Slf4j
@Service
public class VulnerabilityDatabaseServiceImpl implements VulnerabilityDatabaseService {

    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    @Autowired
    private ArtifactRepository artifactRepository;

    @Autowired
    private ConfigurationManager configurationManager;

    @Override
    public TableResultResponse<VulnerabilityDatabaseTableForm> queryVulnerabilityDatabasePage(Integer page, Integer limit, String searchKeyword) {
        if (Objects.isNull(page)) {
            page = 1;
        }
        if (Objects.isNull(limit)) {
            limit = 10;
        }
        Page<Object> result = PageHelper.startPage(page, limit);
        List<VulnerabilityDatabaseTableForm> vulnerabilityDatabaseList = vulnerabilityMapper.selectList(searchKeyword);
        Optional.ofNullable(vulnerabilityDatabaseList).orElse(Collections.emptyList()).forEach(item -> {
            item.setArtifactCount(artifactRepository.countByVulnerabilityUuid(item.getCve(), null, null, ""));
        });
        return new TableResultResponse<VulnerabilityDatabaseTableForm>(result.getTotal(), vulnerabilityDatabaseList);
    }

    @Override
    public VulnerabilityDatabaseForm getOneVulnerabilityDatabase(String cveId) {
        return vulnerabilityMapper.selectOneVulnerabilityDatabase(cveId);
    }

    @Override
    public TableResultResponse<AffectedArtifactsForm> queryArtifactByVulnerabilityUuid(Integer page, Integer limit, String vulnerabilityUuid, String searchKeyword) {
        Pageable pageable = null;
        if (Objects.isNull(page)) {
            page = 1;
        }
        if (Objects.isNull(limit)) {
            limit = 10;
        }
        if (page == 1) {
            pageable = PageRequest.of(page, limit).first();
        } else {
            pageable = PageRequest.of(page, limit).previous();
        }
        org.springframework.data.domain.Page<Artifact> artifactPage = artifactRepository.queryArtifactByVulnerabilityUuid(pageable, vulnerabilityUuid, searchKeyword);
        List<AffectedArtifactsForm> affectedArtifacts = Collections.emptyList();
        if (Objects.nonNull(artifactPage) && CollectionUtils.isNotEmpty(artifactPage.getContent())) {
            affectedArtifacts = artifactPage.getContent().stream().map(artifact -> {
                AffectedArtifactsForm affectedArtifactsForm = AffectedArtifactsForm.builder().uuid(artifact.getUuid()).storageId(artifact.getStorageId()).repositoryId(artifact.getRepositoryId()).build();
                Repository repository = configurationManager.getRepository(artifact.getStorageId(), artifact.getRepositoryId());
                affectedArtifactsForm.setLayout(repository.getLayout());
                String path = artifact.getArtifactCoordinates().buildPath();
                if (DockerLayoutProvider.ALIAS.equalsIgnoreCase(repository.getLayout())) {
                    //docker
                    affectedArtifactsForm.setArtifactName(path.substring(path.indexOf("/") + 1, path.indexOf("/sha256")));
                    affectedArtifactsForm.setArtifactPath(path.substring(0, path.indexOf("/sha256")));
                } else {
                    affectedArtifactsForm.setArtifactName(path.substring(path.lastIndexOf("/") + 1));
                    affectedArtifactsForm.setArtifactPath(path);
                }
                return affectedArtifactsForm;
            }).collect(Collectors.toList());
        }
        return new TableResultResponse<AffectedArtifactsForm>(artifactPage.getTotalElements(), affectedArtifacts);
    }

}
